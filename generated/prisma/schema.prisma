// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders  Order[]
  address Address[]
}

model Address {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [user_id], references: [id])
  street    String
  number    String
  city      String
  state     String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user_id String
  Order   Order[]
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    Category    @relation(fields: [category_id], references: [id])
  category_id String
  OrderItem   OrderItem[]
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  addressId String
  status    String // Ex: "pendente", "em preparação", "entregue"
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User        @relation(fields: [userId], references: [id])
  address Address     @relation(fields: [addressId], references: [id])
  items   OrderItem[]
  payment Payment?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float

  order   Order   @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  order_id   String @unique
  product_id String
}

model Payment {
  id        String   @id @default(uuid())
  method    String // "pix", "cartão", "dinheiro"
  status    String // "pendente", "aprovado", "rejeitado"
  createdAt DateTime @default(now())

  order    Order? @relation(fields: [order_id], references: [id])
  order_id String @unique
}
